{"version":3,"sources":["components/Search.js","components/Images-list.js","components/Info-block.js","components/Main.js","api/Images.js","App.js","serviceWorker.js","index.js"],"names":["Search","onSearch","setImages","useState","searchedStr","setSearchedStr","className","Input","type","placeholder","onChange","e","str","modifiedValue","replace","handleChange","target","value","onKeyDown","key","color","fullWidth","Button","onClick","disabled","SvgIcon","viewBox","fill","width","height","d","ImagesList","images","map","url","style","backgroundImage","InfoBlock","Alert","severity","AlertTitle","Main","src","fetch","then","res","json","catch","err","console","error","hits","largeImageURL","id","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6RAGe,SAASA,EAAT,GAA0C,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,UAAa,EAChBC,mBAAS,IADO,mBAC/CC,EAD+C,KAClCC,EADkC,KAatD,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,cACb,kBAACC,EAAA,EAAD,CACEC,KAAK,SACLC,YAAY,4BACZC,SAAW,SAACC,GAAD,OAhBE,SAACC,GACfA,GAAKV,EAAU,IACpB,IAAMW,EAAgBD,EAAIE,QAAQ,IAAK,KACvCT,EAAeQ,GAaSE,CAAaJ,EAAEK,OAAOC,QACxCC,UAAY,SAACP,GAVP,UAU2BA,EAXhBQ,KACAf,GAAaH,EAASG,IAWvCgB,MAAM,YACNC,WAAS,IAEX,kBAACC,EAAA,EAAD,CACEC,QAAU,kBAAMtB,EAASG,IACzBoB,UAAYpB,EACZgB,MAAM,aAEN,kBAACK,EAAA,EAAD,CACEC,QAAQ,YACRC,KAAK,QACLC,MAAM,OACNC,OAAO,QACP,0BAAMC,EAAE,gBAAgBH,KAAK,SACzB,0BAAMG,EAAE,mPCpCT,SAASC,EAAT,GAAiC,IAAXC,EAAU,EAAVA,OACnC,OACE,yBAAK1B,UAAU,eACX0B,EAAOC,KAAI,gBAAGd,EAAH,EAAGA,IAAKe,EAAR,EAAQA,IAAR,OAAkB,yBAAKf,IAAMA,GACxC,yBAAKb,UAAU,kBAAkB6B,MAAQ,CAAEC,gBAAiB,OAAOF,EAAI,Y,oBCHhE,SAASG,IACtB,OACE,kBAACC,EAAA,EAAD,CAAOC,SAAS,OAAOjC,UAAU,QAC/B,kBAACkC,EAAA,EAAD,aADF,iCAE2B,2DCDhB,SAASC,IAAQ,IAAD,EACDtC,mBAAS,IADR,mBACtB6B,EADsB,KACd9B,EADc,KAU7B,OACE,oCACE,kBAACF,EAAD,CACEE,UAAYA,EACZD,SAXN,SAAuByC,GCNV,IAAmB9B,KDOpB8B,ECNLC,MAAM,GAAD,OAJE,2BAIF,gBAHF,qCAGE,cAA4B/B,EAA5B,sBACTgC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,ODKzBJ,MAAK,gBAAGO,EAAH,EAAGA,KAAH,OAAcjD,EAClBiD,EAAKlB,KAAI,kBAA4B,CAAEC,IAA9B,EAAGkB,cAA+CjC,IAAlD,EAAkBkC,cAUzBrB,EAAOsB,OACP,kBAACvB,EAAD,CAAYC,OAASA,IACrB,kBAACK,EAAD,OEdKkB,MANf,WACE,OACE,kBAACd,EAAD,OCMgBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMoB,c","file":"static/js/main.60a7a30f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Input, Button, SvgIcon } from '@material-ui/core'\r\n\r\nexport default function Search({ onSearch, setImages }) {\r\n  const [searchedStr, setSearchedStr] = useState('');\r\n\r\n  const handleChange = (str) => {\r\n    if (!str) setImages([]);\r\n    const modifiedValue = str.replace(' ', '+');\r\n    setSearchedStr(modifiedValue);\r\n  }\r\n\r\n  const handleKeyDown = ({ key }) => {\r\n    if (key === \"Enter\" && searchedStr) onSearch(searchedStr);\r\n  }\r\n\r\n  return(\r\n    <div className=\"header\">\r\n      <div className=\"search-bar\">\r\n        <Input\r\n          type=\"search\"\r\n          placeholder=\"What are you looking for?\"\r\n          onChange={ (e) => handleChange(e.target.value) }\r\n          onKeyDown={ (e) => handleKeyDown(e) }\r\n          color=\"secondary\"\r\n          fullWidth\r\n        />\r\n        <Button\r\n          onClick={ () => onSearch(searchedStr) }\r\n          disabled={ !searchedStr }\r\n          color=\"secondary\"\r\n        >\r\n          <SvgIcon\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"black\"\r\n            width=\"24px\"\r\n            height=\"24px\">\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n          </SvgIcon>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport default function ImagesList({ images }) {\r\n  return(\r\n    <div className=\"images-list\">\r\n      { images.map(({ key, url }) => <div key={ key }>\r\n        <div className=\"image-container\" style={ { backgroundImage: \"url(\"+url+\")\" } }></div>\r\n      </div>) }\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\n\r\nexport default function InfoBlock() {\r\n  return(\r\n    <Alert severity=\"info\" className='info'>\r\n      <AlertTitle>Info</AlertTitle>\r\n      This are no images yet â€” <strong>try to type something!</strong>\r\n    </Alert>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport Search from './Search.js';\r\nimport ImagesList from './Images-list.js';\r\nimport InfoBlock from './Info-block.js';\r\nimport getImages from '../api/Images';\r\n\r\nexport default function Main() {\r\n  const [images, setImages] = useState([]);\r\n\r\n  function handleSearch (src) {\r\n    getImages(src)\r\n      .then(({ hits }) => setImages(\r\n        hits.map(({ largeImageURL, id }) => ({ url: largeImageURL, key: id }))\r\n      ));\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <Search\r\n        setImages={ setImages }\r\n        onSearch={ handleSearch }/>\r\n\r\n        { images.length\r\n        ? <ImagesList images={ images }/> \r\n        : <InfoBlock /> }\r\n    </>\r\n  );\r\n}","const baseUrl = 'https://pixabay.com/api/';\r\nconst key = '13417145-d0c367819415b077de5e950e3';\r\n\r\nexport default function getImages(str) {\r\n  return fetch(`${baseUrl}?key=${key}&q=${str}&image_type=photo`)\r\n    .then(res => res.json())\r\n    .catch(err => console.error(err));\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Main from './components/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <Main />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}