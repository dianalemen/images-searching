{"version":3,"sources":["components/Search.js","components/Images-list.js","components/Info-block.js","components/Main.js","api/Images.js","App.js","serviceWorker.js","index.js"],"names":["Search","onClick","setImages","useState","searchedStr","setSearchedStr","className","Input","type","placeholder","onChange","e","str","modifiedValue","replace","handleChange","target","value","color","fullWidth","Button","disabled","SvgIcon","viewBox","fill","width","height","d","ImagesList","images","map","key","url","style","backgroundImage","InfoBlock","Alert","severity","AlertTitle","Main","src","fetch","then","res","json","catch","err","console","error","hits","largeImageURL","id","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6RAGe,SAASA,EAAT,GAAyC,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,UAAa,EACfC,mBAAS,IADM,mBAC9CC,EAD8C,KACjCC,EADiC,KASrD,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,cACb,kBAACC,EAAA,EAAD,CACEC,KAAK,SACLC,YAAY,4BACZC,SAAW,SAACC,GAAD,OAZE,SAACC,GACfA,GAAKV,EAAU,IACpB,IAAMW,EAAgBD,EAAIE,QAAQ,IAAK,KACvCT,EAAeQ,GASSE,CAAaJ,EAAEK,OAAOC,QACxCC,MAAM,YACNC,WAAS,IAEX,kBAACC,EAAA,EAAD,CACEnB,QAAU,kBAAMA,EAAQG,IACxBiB,UAAYjB,EACZc,MAAM,aAEN,kBAACI,EAAA,EAAD,CACEC,QAAQ,YACRC,KAAK,QACLC,MAAM,OACNC,OAAO,QACP,0BAAMC,EAAE,gBAAgBH,KAAK,SACzB,0BAAMG,EAAE,mPC/BT,SAASC,EAAT,GAAiC,IAAXC,EAAU,EAAVA,OACnC,OACE,yBAAKvB,UAAU,eACXuB,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,OAAkB,yBAAKD,IAAMA,GACxC,yBAAKzB,UAAU,kBAAkB2B,MAAQ,CAAEC,gBAAiB,OAAOF,EAAI,Y,oBCHhE,SAASG,IACtB,OACE,kBAACC,EAAA,EAAD,CAAOC,SAAS,OAAO/B,UAAU,QAC/B,kBAACgC,EAAA,EAAD,aADF,iCAE2B,2DCDhB,SAASC,IAAQ,IAAD,EACDpC,mBAAS,IADR,mBACtB0B,EADsB,KACd3B,EADc,KAU7B,OACE,oCACE,kBAACF,EAAD,CACEE,UAAYA,EACZD,QAXN,SAAsBuC,GCNT,IAAmB5B,KDOpB4B,ECNLC,MAAM,GAAD,OAJE,2BAIF,gBAHF,qCAGE,cAA4B7B,EAA5B,sBACT8B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,ODKzBJ,MAAK,gBAAGO,EAAH,EAAGA,KAAH,OAAc/C,EAClB+C,EAAKnB,KAAI,kBAA4B,CAAEE,IAA9B,EAAGkB,cAA+CnB,IAAlD,EAAkBoB,cAUzBtB,EAAOuB,OACP,kBAACxB,EAAD,CAAYC,OAASA,IACrB,kBAACM,EAAD,OEdKkB,MANf,WACE,OACE,kBAACd,EAAD,OCMgBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMoB,c","file":"static/js/main.8a4f1746.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Input, Button, SvgIcon } from '@material-ui/core'\r\n\r\nexport default function Search({ onClick, setImages }) {\r\n  const [searchedStr, setSearchedStr] = useState('');\r\n\r\n  const handleChange = (str) => {\r\n    if (!str) setImages([]);\r\n    const modifiedValue = str.replace(' ', '+');\r\n    setSearchedStr(modifiedValue);\r\n  }\r\n\r\n  return(\r\n    <div className=\"header\">\r\n      <div className=\"search-bar\">\r\n        <Input\r\n          type=\"search\"\r\n          placeholder=\"What are you looking for?\"\r\n          onChange={ (e) => handleChange(e.target.value) }\r\n          color=\"secondary\"\r\n          fullWidth\r\n        />\r\n        <Button\r\n          onClick={ () => onClick(searchedStr) }\r\n          disabled={ !searchedStr }\r\n          color=\"secondary\"\r\n        >\r\n          <SvgIcon\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"black\"\r\n            width=\"24px\"\r\n            height=\"24px\">\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n          </SvgIcon>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport default function ImagesList({ images }) {\r\n  return(\r\n    <div className=\"images-list\">\r\n      { images.map(({ key, url }) => <div key={ key }>\r\n        <div className=\"image-container\" style={ { backgroundImage: \"url(\"+url+\")\" } }></div>\r\n      </div>) }\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\n\r\nexport default function InfoBlock() {\r\n  return(\r\n    <Alert severity=\"info\" className='info'>\r\n      <AlertTitle>Info</AlertTitle>\r\n      This are no images yet â€” <strong>try to type something!</strong>\r\n    </Alert>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport Search from './Search.js';\r\nimport ImagesList from './Images-list.js';\r\nimport InfoBlock from './Info-block.js';\r\nimport getImages from '../api/Images';\r\n\r\nexport default function Main() {\r\n  const [images, setImages] = useState([]);\r\n\r\n  function handleClick (src) {\r\n    getImages(src)\r\n      .then(({ hits }) => setImages(\r\n        hits.map(({ largeImageURL, id }) => ({ url: largeImageURL, key: id }))\r\n      ));\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <Search\r\n        setImages={ setImages }\r\n        onClick={ handleClick }/>\r\n\r\n        { images.length\r\n        ? <ImagesList images={ images }/> \r\n        : <InfoBlock /> }\r\n    </>\r\n  );\r\n}","const baseUrl = 'https://pixabay.com/api/';\r\nconst key = '13417145-d0c367819415b077de5e950e3';\r\n\r\nexport default function getImages(str) {\r\n  return fetch(`${baseUrl}?key=${key}&q=${str}&image_type=photo`)\r\n    .then(res => res.json())\r\n    .catch(err => console.error(err));\r\n}","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}